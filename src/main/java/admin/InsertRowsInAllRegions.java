package admin;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.util.Bytes;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// cc ClusterOperationExample Shows the use of the cluster operations
public class InsertRowsInAllRegions {

    private static final DateFormat dateFormat = new SimpleDateFormat("yyyyMM");


    public static void main(String[] args) throws IOException, InterruptedException {


        String[] array1 = {


                "201201", "201202", "201203", "201204", "201205", "201206", "201207", "201208", "201209", "201210", "201211", "201212",
                "201301", "201302", "201303", "201304", "201305", "201306", "201307", "201308", "201309", "201310", "201311", "201312",
                "201401", "201402", "201403", "201404", "201405", "201406", "201407", "201408", "201409", "201410", "201411", "201412",
                "201501", "201501ES0031500112971007DM0F", "201501ES0031500175381001QM0F", "201501ES0031500303551001TK0F",
                "201502", "201502ES0031500112971007DM0F", "201502ES0031500175381001QM0F", "201502ES0031500303551001TK0F",
                "201503", "201503ES0031500112971007DM0F", "201503ES0031500175381001QM0F", "201503ES0031500303551001TK0F",
                "201504", "201504ES0031500112971007DM0F", "201504ES0031500175381001QM0F", "201504ES0031500303551001TK0F",
                "201505", "201505ES0031500112971007DM0F", "201505ES0031500175381001QM0F", "201505ES0031500303551001TK0F",
                "201506", "201506ES0031500112971007DM0F", "201506ES0031500175381001QM0F", "201506ES0031500303551001TK0F",
                "201507", "201507ES0031500112971007DM0F", "201507ES0031500175381001QM0F", "201507ES0031500303551001TK0F",
                "201508", "201508ES0031500112971007DM0F", "201508ES0031500175381001QM0F", "201508ES0031500303551001TK0F",
                "201509", "201509ES0031500112971007DM0F", "201509ES0031500175381001QM0F", "201509ES0031500303551001TK0F",
                "201510", "201510ES0031500112971007DM0F", "201510ES0031500175381001QM0F", "201510ES0031500303551001TK0F",
                "201511", "201511ES0031500112971007DM0F", "201511ES0031500175381001QM0F", "201511ES0031500303551001TK0F",
                "201512", "201512ES0031500112971007DM0F", "201512ES0031500175381001QM0F", "201512ES0031500303551001TK0F",
                "201601", "201601ES0031500112971007DM0F", "201601ES0031500175381001QM0F", "201601ES0031500303551001TK0F",
                "201602", "201602ES0031500112971007DM0F", "201602ES0031500175381001QM0F", "201602ES0031500303551001TK0F",
                "201603", "201603ES0031500112971007DM0F", "201603ES0031500175381001QM0F", "201603ES0031500303551001TK0F",
                "201604", "201604ES0031500112971007DM0F", "201604ES0031500175381001QM0F", "201604ES0031500303551001TK0F",
                "201605", "201605ES0031500112971007DM0F", "201605ES0031500175381001QM0F", "201605ES0031500303551001TK0F",
                "201606", "201606ES0031500052674001DY0F", "201606ES0031500112971007DM0F", "201606ES0031500136265019XP0F", "201606ES0031500175381001QM0F", "201606ES0031500239137003XF0F", "201606ES0031500303551001TK0F", "201606ES0031500567379030VH0F",
                "201607", "201607ES0031500052674001DY0F", "201607ES0031500112971007DM0F", "201607ES0031500136265019XP0F", "201607ES0031500175381001QM0F", "201607ES0031500239137003XF0F", "201607ES0031500303551001TK0F", "201607ES0031500567379030VH0F",
                "201608", "201608ES0031500052674001DY0F", "201608ES0031500112971007DM0F", "201608ES0031500136265019XP0F", "201608ES0031500175381001QM0F", "201608ES0031500239137003XF0F", "201608ES0031500303551001TK0F", "201608ES0031500567379030VH0F",
                "201609", "201609ES0031500052674001DY0F", "201609ES0031500112971007DM0F", "201609ES0031500136265019XP0F", "201609ES0031500175381001QM0F", "201609ES0031500239137003XF0F", "201609ES0031500303551001TK0F", "201609ES0031500567379030VH0F",
                "201610", "201610ES0031500052674001DY0F", "201610ES0031500112971007DM0F", "201610ES0031500136265019XP0F", "201610ES0031500175381001QM0F", "201610ES0031500239137003XF0F", "201610ES0031500303551001TK0F", "201610ES0031500567379030VH0F",
                "201611", "201611ES0031500052674001DY0F", "201611ES0031500112971007DM0F", "201611ES0031500136265019XP0F", "201611ES0031500175381001QM0F", "201611ES0031500239137003XF0F", "201611ES0031500303551001TK0F", "201611ES0031500567379030VH0F",
                "201612", "201612ES0031500052674001DY0F", "201612ES0031500112971007DM0F", "201612ES0031500136265019XP0F", "201612ES0031500175381001QM0F", "201612ES0031500239137003XF0F", "201612ES0031500303551001TK0F", "201612ES0031500567379030VH0F",
                "201701", "201701ES0031500052674001DY0F", "201701ES0031500112971007DM0F", "201701ES0031500136265019XP0F", "201701ES0031500175381001QM0F", "201701ES0031500239137003XF0F", "201701ES0031500303551001TK0F", "201701ES0031500567379030VH0F",
                "201702", "201702ES0031500052674001DY0F", "201702ES0031500112971007DM0F", "201702ES0031500136265019XP0F", "201702ES0031500175381001QM0F", "201702ES0031500239137003XF0F", "201702ES0031500303551001TK0F", "201702ES0031500567379030VH0F"};


        List<String> splits = new ArrayList<>(Arrays.asList(array1));


        Configuration conf = HBaseConfiguration.create();

        Connection connection = ConnectionFactory.createConnection(conf);
        Admin admin = connection.getAdmin();

        String sTable = args[0];
        String sRows = args[1];


        System.out.println("Inserting " + sRows + " per Region in table " + sTable);
        TableName tableName = TableName.valueOf(sTable);


        BufferedMutator mutator = connection.getBufferedMutator(tableName);

        for (String split : splits) {
            System.out.println("INSERTING IN " + split);
            for (int a = 0; a <= Integer.parseInt(sRows); a++) {
                String row = split + Character.toString((char) a);
                Put put = new Put(Bytes.toBytes(row));
                put.addColumn(Bytes.toBytes("colfam1"), Bytes.toBytes("col1"),
                        Bytes.toBytes("val1asdfasddasasdfÃ±asldfbbqbkjasbdfkljasbfkljabsdkljfbaskldfjbaskljdfbalksjbflaksjdbf"));
                System.out.println("Adding row: " + row);
                mutator.mutate(put);
            }
        }


        mutator.close();

        admin.close();
        connection.close();


    }
}
